// Generated by Haxe 4.1.3
(function ($hx_exports, $global) { "use strict";
var Controls = function() { };
Controls.init = function() {
	window.document.onkeydown = function(e) {
		Controls.k.h[e.keyCode] = true;
	};
	window.document.onkeyup = function(e) {
		Controls.k.h[e.keyCode] = false;
	};
	Game.ctx.canvas.onpointerdown = function(e) {
		Controls.k.h[-1 - e.button] = true;
	};
	Game.ctx.canvas.onpointerup = function(e) {
		Controls.k.h[-1 - e.button] = false;
	};
	Game.ctx.canvas.onpointermove = function(e) {
		return Controls.M = { x : Math.floor(e.offsetX / Game.zx), y : Math.floor(e.offsetY / Game.zy)};
	};
	Game.ctx.canvas.ontouchstart = function(e) {
		Controls.k.h[-1] = true;
	};
	Game.ctx.canvas.ontouchend = function(e) {
		Controls.k.h[-1] = false;
	};
	Game.ctx.canvas.ontouchmove = function(e) {
		return Controls.M = { x : Math.floor(e.touches.item(0).clientX / Game.zx), y : Math.floor(e.touches.item(0).clientY / Game.zy)};
	};
};
Controls.p = function(n) {
	if(Controls.k.h.hasOwnProperty(n)) {
		return Controls.k.h[n];
	} else {
		return false;
	}
};
var DrawTools = function() { };
DrawTools.clr = function(col) {
	if(col != null) {
		DrawTools.frect(col,0,0,Game.w,Game.h);
	} else {
		Game.ctx.clearRect(0,0,Game.w,Game.h);
	}
};
DrawTools.frect = function(col,x,y,w,h) {
	Game.ctx.fillStyle = col;
	Game.ctx.fillRect(x,y,w,h);
};
var Game = $hx_exports["Game"] = function() { };
Game.init = function(p,_w,_h) {
	window.document.oncontextmenu = function(e) {
		return e.preventDefault();
	};
	var c = window.document.createElement("canvas");
	var el = window.document.getElementById(p);
	el.appendChild(c);
	Game.w = c.width = _w;
	Game.h = c.height = _h;
	Game.ctx = c.getContext("2d",null);
	Controls.init();
	window.onresize = function(e) {
		Game.zx = el.offsetWidth / _w;
		return Game.zy = el.offsetHeight / _h;
	};
	window.onresize();
	window.requestAnimationFrame(Game.loop);
	Main.main();
};
Game.loop = function(e) {
	Game.t = e;
	Game.s.update();
	Game.s.draw();
	window.requestAnimationFrame(Game.loop);
};
var Main = function() { };
Main.main = function() {
	Game.s = new MyScene();
};
var MyScene = function() {
	this.ball = { x : 64, y : 64, width : 2, height : 2};
	this.blocks = [];
	this.paddle = { x : 64, y : 120, width : 10, height : 1};
	this.createBlocks();
};
MyScene.prototype = {
	createBlocks: function() {
		var rowColor = "red";
		var _g = 0;
		while(_g < 3) {
			var y = _g++;
			switch(y) {
			case 0:
				rowColor = "red";
				break;
			case 1:
				rowColor = "blue";
				break;
			case 2:
				rowColor = "purple";
				break;
			default:
			}
			var _g1 = 0;
			while(_g1 < 32) this.blocks.push({ x : 4 * _g1++, y : 4 * y, width : 4, height : 4, color : rowColor});
		}
	}
	,update: function() {
		if(Controls.p(37)) {
			this.paddle.x -= 1;
		}
		if(Controls.p(39)) {
			this.paddle.x += 1;
		}
	}
	,draw: function() {
		DrawTools.clr();
		this.drawBlocks();
		this.drawBall();
		this.drawPaddle();
	}
	,drawBlocks: function() {
		var _g = 0;
		var _g1 = this.blocks;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			DrawTools.frect(block.color,block.x,block.y,block.width,block.height);
		}
	}
	,drawBall: function() {
		DrawTools.frect("lightBlue",this.ball.x,this.ball.y,this.ball.width,this.ball.height);
	}
	,drawPaddle: function() {
		DrawTools.frect("red",this.paddle.x,this.paddle.y,this.paddle.width,this.paddle.height);
	}
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
Controls.M = { x : 0, y : 0};
Controls.k = new haxe_ds_IntMap();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {});
